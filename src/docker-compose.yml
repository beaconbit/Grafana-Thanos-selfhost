services:

  # Python service that continually scrapes metrics and exposes them in a format prometheus understands
  metric_daemon:
    build:
      context: ./python  # The directory containing your Dockerfile and application code
      dockerfile: Dockerfile.python
    ports:
      - "8000:8000"  # Optional: Map ports if your app listens on a specific port
    command: ["python", "app.py"]
    networks:
      - thanos

  # Frontend
  grafana:
    image: grafana/grafana  # Use the Grafana image
    container_name: frontend  # Name of the container
    user: "0:0"
    ports:
      - "3001:3000"  # Map port 3000 on the host to port 3000 in the container
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning  # Mount provisioning directory
      - ./data/grafana:/var/lib/grafana  # Persist Grafana data
    networks:
      - thanos

  # Object Storage Layer
  minio:
    container_name: minio-storage-layer
    build:
        context: .
        dockerfile: Dockerfile.minio
    restart: always
    working_dir: "/minio-image/storage"
    volumes:
        - ./Storage/minio/storage:/minio-image/storage
    ports:
        - "9000:9000"
        - "9001:9001"
    environment:
        MINIO_ROOT_USER: ${MINIO_ROOT_USER}
        MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /minio-image/storage --console-address :9001
    networks:
      - thanos

  # Bucket Configuration
  create_bucket:
    image: minio/mc
    depends_on:
      - minio
    environment:
        MINIO_ROOT_USER: ${MINIO_ROOT_USER}
        MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add myminio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD};
      /usr/bin/mc mb myminio/prometheus-data;
      exit 0;
      "
    networks:
      - thanos

  # Prometheus Service
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    user: "0:0"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./data/prometheus:/prometheus
      - ./data/prometheus/wal:/prometheus/wal
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.enable-lifecycle"
      - '--storage.tsdb.min-block-duration=1h'  # Set to an appropriate value
      - '--storage.tsdb.max-block-duration=1h'  # Set to the same value
      - "--storage.tsdb.retention.time=6h" # Keep short retention for Thanos Sidecar
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "9090:9090" # Expose Prometheus web interface
    networks:
      - thanos

  # Thanos Sidecar
  sidecar:
    image: quay.io/thanos/thanos:v0.24.0
    container_name: thanos-sidecar
    depends_on:
      prometheus:
        condition: service_healthy
      create_bucket:
        condition: service_completed_successfully
    command:
      - "sidecar"
      - "--tsdb.path=/prometheus"
      - "--prometheus.url=http://prometheus:9090"
      - "--objstore.config-file=/etc/thanos/objstore.yml"
    volumes:
      - ./data/prometheus:/prometheus
      - ./objstore.yml:/etc/thanos/objstore.yml
      - ./data/prometheus/wal:/prometheus/wal
    networks:
      - thanos

  # Thanos Store
  store:
    image: quay.io/thanos/thanos:v0.24.0
    container_name: thanos-store
    depends_on:
      create_bucket:
        condition: service_completed_successfully
    command:
      - "store"
      - "--objstore.config-file=/etc/thanos/objstore.yml"
      - "--data-dir=/thanos/store"
    volumes:
      - ./objstore.yml:/etc/thanos/objstore.yml
      - ./data/thanos/store:/thanos/store
    networks:
      - thanos

  # Thanos Query
  query:
    image: quay.io/thanos/thanos:v0.24.0
    container_name: thanos-query
    depends_on:
      - sidecar
      - store
    command:
      - "query"
      - "--http-address=0.0.0.0:9091"
      - "--grpc-address=0.0.0.0:9092"
      - "--store=sidecar:10901"
      - "--store=store:10901"
    ports:
      - "9091:9091" # Query HTTP API
      - "9092:9092" # gRPC API
    networks:
      - thanos

  # Thanos Compact
  compact:
    image: quay.io/thanos/thanos:v0.24.0
    container_name: thanos-compact
    command:
      - "compact"
      - "--objstore.config-file=/etc/thanos/objstore.yml"
      - "--data-dir=/thanos/compact"
    volumes:
      - ./objstore.yml:/etc/thanos/objstore.yml
      - ./data/thanos/compact:/thanos/compact
    networks:
      - thanos

  # Thanos Ruler
  ruler:
    image: quay.io/thanos/thanos:v0.24.0
    container_name: thanos-ruler
    depends_on:
      - query
    command:
      - "rule"
      - "--rule-file=/etc/thanos/rules/*.yml"
      - "--data-dir=/thanos/ruler"
      - "--eval-interval=1m"
      - "--query=thanos-query:9091"
      - "--objstore.config-file=/etc/thanos/objstore.yml"
    volumes:
      - ./rules:/etc/thanos/rules
      - ./objstore.yml:/etc/thanos/objstore.yml
      - ./data/thanos/ruler:/thanos/ruler
    networks:
      - thanos


volumes:
  data:
    driver: local
networks:
  thanos:
    driver: bridge
